name: Render diagram preview

on:
  pull_request:

jobs:
  render:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.x"
          cache: true
          cache-dependency-path: |
            nagare/go.mod
            nagare/go.sum

      - name: Download dependencies
        working-directory: nagare
        run: go mod download

      - name: Build Nagare server
        working-directory: nagare
        run: go build -o nagare-server ./cmd/nagare

      - name: Start Nagare server
        run: |
          cd nagare
          ./nagare-server > server.log 2>&1 &
          echo $! > server.pid

      - name: Fetch /test SVG output
        run: |
          for attempt in {1..60}; do
            if curl -fsS http://localhost:8080/test -o nagare-test.svg; then
              exit 0
            fi
            sleep 1
          done
          echo "Server failed to respond" >&2
          exit 1

      - name: Stop Nagare server
        if: always()
        run: |
          if [ -f nagare/server.pid ]; then
            kill $(cat nagare/server.pid) 2>/dev/null || true
            sleep 1
            if kill -0 $(cat nagare/server.pid) 2>/dev/null; then
              kill -9 $(cat nagare/server.pid) 2>/dev/null || true
            fi
          fi
          echo '--- Nagare server log ---'
          cat nagare/server.log || true

      - name: Validate SVG file
        run: |
          if [ ! -f nagare-test.svg ]; then
            echo "SVG output missing" >&2
            exit 1
          fi

          if [ ! -s nagare-test.svg ]; then
            echo "SVG file is empty" >&2
            exit 1
          fi

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Upload diagram and comment on PR
        env:
          GH_TOKEN: ${{ github.token }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPOSITORY: ${{ github.repository }}
        run: |
          set -euo pipefail

          marker="<!-- nagare-test-diagram-preview -->"

          existing_comment=$(gh api repos/$REPOSITORY/issues/$PR_NUMBER/comments --paginate \
            --jq "map(select(.user.login == \"github-actions[bot]\" and (.body | contains(\"$marker\")))) | first")

          if [ "$existing_comment" != "null" ] && [ -n "$existing_comment" ]; then
            comment_id=$(echo "$existing_comment" | jq -r '.id')
            comment_node_id=$(echo "$existing_comment" | jq -r '.node_id')
          else
            placeholder_body=$'### Nagare /test diagram preview\n'$marker$'\n\nUploading previewâ€¦'
            new_comment=$(gh api repos/$REPOSITORY/issues/$PR_NUMBER/comments -f body="$placeholder_body")
            comment_id=$(echo "$new_comment" | jq -r '.id')
            comment_node_id=$(echo "$new_comment" | jq -r '.node_id')
          fi

          query='mutation($commentId: ID!, $name: String!, $contentType: String!, $file: Upload!) {
            uploadCommentAttachment(input: {commentId: $commentId, name: $name, contentType: $contentType, file: $file}) {
              attachment { downloadUrl }
            }
          }'

          operations=$(jq -n --arg query "$query" --arg commentId "$comment_node_id" '{
            query: $query,
            variables: {
              commentId: $commentId,
              name: "nagare-test.svg",
              contentType: "image/svg+xml",
              file: null
            }
          }')

          upload_response=$(curl -sSf \
            -H "Authorization: bearer $GH_TOKEN" \
            -H "GraphQL-Features: comment-attachments" \
            -F operations="$operations" \
            -F 'map={"0":["variables.file"]}' \
            -F 0=@nagare-test.svg \
            https://api.github.com/graphql)

          attachment_url=$(echo "$upload_response" | jq -r '.data.uploadCommentAttachment.attachment.downloadUrl')

          if [ -z "$attachment_url" ] || [ "$attachment_url" = "null" ]; then
            echo "Failed to upload comment attachment" >&2
            echo "$upload_response" | jq '.' >&2 || echo "$upload_response" >&2
            exit 1
          fi

          python - "$attachment_url" -c 'import sys; url = sys.argv[1]; lines = ["### Nagare /test diagram preview", "<!-- nagare-test-diagram-preview -->", "", "<details>", "<summary>View diagram</summary>", "", "![Nagare /test preview](__DIAGRAM_URL__)", "", "</details>"]; open("comment.md", "w").write("\n".join(lines).replace("__DIAGRAM_URL__", url))'

          gh api repos/$REPOSITORY/issues/comments/$comment_id -X PATCH -F body="$(cat comment.md)"

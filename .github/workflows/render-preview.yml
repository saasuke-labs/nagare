name: Render diagram preview

on:
  pull_request:

jobs:
  render:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
          cache: true
          cache-dependency-path: |
            nagare/go.mod
            nagare/go.sum

      - name: Download dependencies
        working-directory: nagare
        run: go mod download

      - name: Build Nagare server
        working-directory: nagare
        run: go build -o nagare-server ./cmd/nagare

      - name: Start Nagare server
        run: |
          cd nagare
          ./nagare-server > server.log 2>&1 &
          echo $! > server.pid

      - name: Fetch /test SVG output
        run: |
          for attempt in {1..60}; do
            if curl -fsS http://localhost:8080/test -o nagare-test.svg; then
              exit 0
            fi
            sleep 1
          done
          echo "Server failed to respond" >&2
          exit 1

      - name: Stop Nagare server
        if: always()
        run: |
          if [ -f nagare/server.pid ]; then
            kill $(cat nagare/server.pid) 2>/dev/null || true
            sleep 1
            if kill -0 $(cat nagare/server.pid) 2>/dev/null; then
              kill -9 $(cat nagare/server.pid) 2>/dev/null || true
            fi
          fi
          echo '--- Nagare server log ---'
          cat nagare/server.log || true

      - name: Upload SVGs to repository and create PR comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          HEAD_SHA: ${{ github.event.pull_request.head.sha }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
          REPO: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
          HEAD_HTML: ${{ github.event.pull_request.head.html_url }}
          SERVER_URL: ${{ github.server_url }}
        run: |
          set -euo pipefail

          mkdir -p .github/pr-images/pr-$PR_NUMBER

          if ! cp ./*.svg .github/pr-images/pr-$PR_NUMBER/ 2>/dev/null; then
            echo "No SVG files found to upload"
            exit 0
          fi

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add .github/pr-images/pr-$PR_NUMBER/
          if ! git diff --cached --quiet; then
            BRANCH_NAME="${GITHUB_HEAD_REF:-$(git rev-parse --abbrev-ref HEAD)}"
            git commit -m "Add generated SVG examples for PR #$PR_NUMBER [skip ci]"
            git push origin HEAD:"$BRANCH_NAME"
          fi

          python - <<'PYCOMMENT'
import os
import pathlib

pr_number = os.environ["PR_NUMBER"]
head_sha = os.environ["HEAD_SHA"]
repo = os.environ["REPO"]
run_id = os.environ["RUN_ID"]
head_html = os.environ["HEAD_HTML"]
server_url = os.environ["SERVER_URL"]
images_dir = pathlib.Path(".github/pr-images") / f"pr-{pr_number}"
svg_files = sorted(images_dir.glob("*.svg"))
if not svg_files:
    raise SystemExit("No SVG files available to comment")

lines = ["## ðŸŽ¨ Generated SVG Examples", ""]
for idx, path in enumerate(svg_files, 1):
    name = path.stem
    filename = path.name
    raw_url = f"https://raw.githubusercontent.com/{repo}/{head_sha}/{images_dir.as_posix()}/{filename}"
    lines.append(f"### Example {idx}: {name}")
    lines.append(f"![{name}]({raw_url})")
    lines.append("")
    lines.append("<details><summary>View SVG source</summary>")
    lines.append("")
    lines.append(f"[`{filename}`]({raw_url})")
    lines.append("")
    lines.append("</details>")
    lines.append("")

lines.append("---")
lines.append(f"*Generated from commit: [`{head_sha}`]({head_html})*")
lines.append(f"*Workflow run: [`{run_id}`]({server_url}/{repo}/actions/runs/{run_id})*")
lines.append(f"*Images stored in: `{images_dir.as_posix()}/`*")

pathlib.Path("comment.md").write_text("\n".join(lines))
PYCOMMENT

          gh pr comment "$PR_NUMBER" --body-file comment.md

          echo "âœ… SVG files uploaded and PR comment created successfully"

      - name: Clean up old PR image directories (optional)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
        run: |
          set -euo pipefail

          for dir in .github/pr-images/pr-*; do
            if [ -d "$dir" ]; then
              pr_num=$(basename "$dir" | sed 's/pr-//')
              if ! gh pr view "$pr_num" >/dev/null 2>&1; then
                echo "Cleaning up images for closed PR #$pr_num"
                git rm -rf "$dir"
              fi
            fi
          done

          if ! git diff --cached --quiet 2>/dev/null; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git commit -m "Clean up images for closed PRs [skip ci]"
            BRANCH_NAME="${GITHUB_HEAD_REF:-$(git rev-parse --abbrev-ref HEAD)}"
            git push origin HEAD:"$BRANCH_NAME"
          fi
        continue-on-error: true
